name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x, 22.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: üîÑ Auto-sync versions
      run: |
        echo "Syncing package.json version with git tags..."
        npm run sync-versions
      
    - name: Security audit
      run: npm audit --audit-level moderate
      
    - name: Run tests
      run: npm test
      
    - name: üîí CRITICAL SECURITY CHECK
      run: |
        echo "üö® Running critical security verification..."
        echo "This will FAIL if providers file has been tampered with!"
        # Skip hash verification during semantic-release process
        if [[ "$GITHUB_ACTOR" == "semantic-release-bot" ]]; then
          echo "‚ÑπÔ∏è  Skipping hash verification during semantic-release"
        else
          npm test -- --testNamePattern="CRITICAL.*production providers file must have correct hash" --verbose
          echo "‚úÖ Security check passed - providers file integrity verified"
        fi
      
    - name: Run build
      run: npm run build
      
    - name: Test examples
      run: |
        node examples/example-js.js
        npx tsx examples/example.ts

  coverage:
    name: Coverage
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run tests with coverage
      run: npm run test:coverage
      
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      if: success()
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella

  publish:
    name: Publish to NPM
    runs-on: ubuntu-latest
    needs: [test, coverage]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    permissions:
      contents: write
      issues: write
      pull-requests: write
      packages: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        # Fetch all history for semantic versioning
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        registry-url: 'https://registry.npmjs.org'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build package
      run: npm run build
      
    - name: Semantic Release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      run: npx semantic-release

